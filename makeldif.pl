################################################################################
#
# Title:         fMakeLDIF
# Author:        Frode Sjovatsen
# Version:       1.1.0
# Date started:  11.04.2006 11:43
# Description:   Utility to convert "something"-separeted files to LDIF files.
#
# TODO:
#
# History:
#  -------+-----------------------------------------------------------
#   Vers. | Description
#  -------+-----------------------------------------------------------
#   1.0.0 | Initial release.
#   1.0.1 | Added 'version: 1' to output when theres no -o parameter so that
#         | one can pipe it directly to ie. ldapmodify.
#   1.1.0 | Added commandline parameter for custom seperator in the attribfile.
#   1.1.1 | Added some more info to help()
#
################################################################################

################################################################################
#
# Global stuff
#

use Getopt::Std;
use Switch;

$version = "1.1.1";
$err_file = "Can't open file: $!";

################################################################################

################################################################################
#
# Some functions
#
sub getprogramname()
{
	@appdir = split(/\\/, $0);
	return $appdir[$#appdir];	
}

sub help() 
{
	print "\n" .
        "fMakeLDIF v$version (C) Frode Sjovatsen 2006.\n\n" .
        "Usage: $progname -t <template> -a <attrib> [-o <output>] [-s <seperator>] [-h]\n" .
        "\n" .
        " Options:\n" . 
        "   -t file  Template file. This file is the template of the LDIF code to\n" .
        "            be generated. Use *1..*n as variables to be replaces from the\n" .
        "            attribute file.\n" .
        "\n" . 
        "   -a file  \"Something\"-separaded file with attributes to be replaced by the\n" .
        "            variables in the template. Ie.:\n" .
        "\n" .
        "              attrib.txt file\n" .
        "              ---------------\n" .
        "              user1;locationA\n" .
        "\n" .
        "              template.ldif file\n" .
        "              ------------------\n" .
        "               dn: cn=*1,ou=users,o=myorg\n" .
        "               changetype: modify\n" .
        "               replace: l\n" .
        "               l: *2\n" .
        "\n" .
        "            This will generate:\n" .
        "\n" . 
        "               dn: cn=user1,ou=users,o=myorg\n" .
        "               changetype: modify\n" .
        "               replace: l\n" .
        "               l: locationA\n" .  
        "\n" .
        "   -o file  The file to write LDIF code to. If not specified it will be\n" .
        "            written to <STDOUT>.\n" .
        "\n" .
        "   -s sep   The separator for the attribute file. If not specified ';' will\n" . 
        "            be used. Use tab for \\t (tabulator) and space for whitespace.\n" .
        "\n" . 
        "   -h       Prints this help text." .
        "\n\n" .
        "Ie.: makeldif.pl -t template.file -a attrib.file -o new.ldif -s tab\n" .
        "\n" .
        "Report bugs to <frode\@sjovatsen.net>.\n";
}

sub usage() 
{
	print "\n" .
	      "Usage: $progname [-t file -a file -o file -s sep] [-h]\n" .
	      "Try `$progname -h' for more information.\n";
	      	
	exit(-1);	
}

################################################################################

################################################################################
#
# The main program
#

$progname = getprogramname();

my %copt=(); # commandline options

getopts('t:a:o:s:h', \%copt);

# Do the commandline swithes
if ($copt{t} && $copt{a}) { 

	@userlist = ();

	open(LDIFTEMPLATE, $copt{t}) or die $err_file;
	open(USERS, $copt{a}) or die $err_file;
	if ($copt{o}) {
		open(LDIFFILE, ">$copt{o}") or die $err_file;
		print LDIFFILE "###################################################################\n" .
		               "#\n" .
		               "# Generated by fMakeLDIF v$version\n".
		               "# Frode Sjovatsen (C) 2006\n" .
		               "#\n" .
		               "###################################################################\n\n";
		print LDIFFILE "version: 1\n\n";
	}
	else {
		print "version: 1\n\n";
	}
	
	# Getting seperator
	if ($copt{s}) {
		switch($copt{s}) {
			case "tab"  	{ $sep = '\t'; }
			case "space"	{ $sep = ' '; }
			else					{ $sep = $copt{s}; }
		}
	}
	else {
		$sep=";";
	}
		
	$userCount = 0;
	
	while (<USERS>) {
		chomp;
		$userlist[$userCount++] = $_;
	}
	
	@a = split(/$sep/, $userlist[$userCount - 1]);
	$attribCount = scalar @a;
	
	while (<LDIFTEMPLATE>) {
		$ldif .= $_;
	}
	
	for ($i = 0; $i < $userCount; $i++) {
		$new_ldif = $ldif;
		for ($j = 0; $j < $attribCount; $j++) {
			@attrib = split(/$sep/, $userlist[$i]);
			$f = $j + 1;
			$new_ldif =~ s/\*$f/$attrib[$j]/g;
		}
		if ($copt{o}) {
			print LDIFFILE "$new_ldif\n\n";
		}
		else {
			print "$new_ldif\n\n";
		}
	}
	
	close USERS;
	close LDIFFILE;
	close LDIFTEMPLATE;
	
	# Generating report
	if ($copt{o}) {
  	print "\n";
		print "Generating LIDF document\n".
		      "========================================\n".
		      "Entries: $userCount \n".
		      "Attributes: $attribCount \n".
		      "Seperator: '$sep'\n".
		      "LDIF file: $copt{o}\n\n";
	}
}
elsif ($copt{h}) {
	help();
}
else {
	usage();
}

################################################################################